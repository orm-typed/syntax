// Generated from ./o7d.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class o7dLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly T__2 = 3;
	public static readonly T__3 = 4;
	public static readonly T__4 = 5;
	public static readonly T__5 = 6;
	public static readonly T__6 = 7;
	public static readonly T__7 = 8;
	public static readonly T__8 = 9;
	public static readonly T__9 = 10;
	public static readonly T__10 = 11;
	public static readonly T__11 = 12;
	public static readonly T__12 = 13;
	public static readonly T__13 = 14;
	public static readonly T__14 = 15;
	public static readonly T__15 = 16;
	public static readonly ID = 17;
	public static readonly STRING = 18;
	public static readonly ESC_SEQ = 19;
	public static readonly UNICODE_ESC = 20;
	public static readonly HEX = 21;
	public static readonly NUMBER = 22;
	public static readonly BOOLEAN = 23;
	public static readonly WS = 24;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "ID", "STRING", 
		"ESC_SEQ", "UNICODE_ESC", "HEX", "NUMBER", "BOOLEAN", "WS",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'header'", "'{'", "'}'", "'model'", "'@@'", "'.'", "'('", 
		"')'", "'?'", "'[]'", "'@'", "','", "':'", "'null'", "'['", "']'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, "ID", "STRING", "ESC_SEQ", "UNICODE_ESC", 
		"HEX", "NUMBER", "BOOLEAN", "WS",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(o7dLexer._LITERAL_NAMES, o7dLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return o7dLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(o7dLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "o7d.g4"; }

	// @Override
	public get ruleNames(): string[] { return o7dLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return o7dLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return o7dLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return o7dLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x1A\x9E\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x04\x19\t\x19\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02" +
		"\x03\x02\x03\x02\x03\x03\x03\x03\x03\x04\x03\x04\x03\x05\x03\x05\x03\x05" +
		"\x03\x05\x03\x05\x03\x05\x03\x06\x03\x06\x03\x06\x03\x07\x03\x07\x03\b" +
		"\x03\b\x03\t\x03\t\x03\n\x03\n\x03\v\x03\v\x03\v\x03\f\x03\f\x03\r\x03" +
		"\r\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x10\x03" +
		"\x10\x03\x11\x03\x11\x03\x12\x03\x12\x07\x12d\n\x12\f\x12\x0E\x12g\v\x12" +
		"\x03\x13\x03\x13\x03\x13\x07\x13l\n\x13\f\x13\x0E\x13o\v\x13\x03\x13\x03" +
		"\x13\x03\x14\x03\x14\x03\x14\x05\x14v\n\x14\x03\x15\x03\x15\x03\x15\x03" +
		"\x15\x03\x15\x03\x15\x03\x16\x03\x16\x03\x17\x06\x17\x81\n\x17\r\x17\x0E" +
		"\x17\x82\x03\x17\x03\x17\x06\x17\x87\n\x17\r\x17\x0E\x17\x88\x05\x17\x8B" +
		"\n\x17\x03\x18\x03\x18\x03\x18\x03\x18\x03\x18\x03\x18\x03\x18\x03\x18" +
		"\x03\x18\x05\x18\x96\n\x18\x03\x19\x06\x19\x99\n\x19\r\x19\x0E\x19\x9A" +
		"\x03\x19\x03\x19\x02\x02\x02\x1A\x03\x02\x03\x05\x02\x04\x07\x02\x05\t" +
		"\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17" +
		"\x02\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02\x11!\x02\x12#\x02\x13" +
		"%\x02\x14\'\x02\x15)\x02\x16+\x02\x17-\x02\x18/\x02\x191\x02\x1A\x03\x02" +
		"\t\x05\x02C\\aac|\x06\x022;C\\aac|\x04\x02$$^^\n\x02$$11^^ddhhppttvv\x05" +
		"\x022;CHch\x03\x022;\x05\x02\v\f\x0F\x0F\"\"\x02\xA6\x02\x03\x03\x02\x02" +
		"\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02" +
		"\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02" +
		"\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02" +
		"\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02" +
		"\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02" +
		"\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02\'\x03\x02\x02\x02\x02)" +
		"\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02-\x03\x02\x02\x02\x02/\x03\x02" +
		"\x02\x02\x021\x03\x02\x02\x02\x033\x03\x02\x02\x02\x05:\x03\x02\x02\x02" +
		"\x07<\x03\x02\x02\x02\t>\x03\x02\x02\x02\vD\x03\x02\x02\x02\rG\x03\x02" +
		"\x02\x02\x0FI\x03\x02\x02\x02\x11K\x03\x02\x02\x02\x13M\x03\x02\x02\x02" +
		"\x15O\x03\x02\x02\x02\x17R\x03\x02\x02\x02\x19T\x03\x02\x02\x02\x1BV\x03" +
		"\x02\x02\x02\x1DX\x03\x02\x02\x02\x1F]\x03\x02\x02\x02!_\x03\x02\x02\x02" +
		"#a\x03\x02\x02\x02%h\x03\x02\x02\x02\'r\x03\x02\x02\x02)w\x03\x02\x02" +
		"\x02+}\x03\x02\x02\x02-\x80\x03\x02\x02\x02/\x95\x03\x02\x02\x021\x98" +
		"\x03\x02\x02\x0234\x07j\x02\x0245\x07g\x02\x0256\x07c\x02\x0267\x07f\x02" +
		"\x0278\x07g\x02\x0289\x07t\x02\x029\x04\x03\x02\x02\x02:;\x07}\x02\x02" +
		";\x06\x03\x02\x02\x02<=\x07\x7F\x02\x02=\b\x03\x02\x02\x02>?\x07o\x02" +
		"\x02?@\x07q\x02\x02@A\x07f\x02\x02AB\x07g\x02\x02BC\x07n\x02\x02C\n\x03" +
		"\x02\x02\x02DE\x07B\x02\x02EF\x07B\x02\x02F\f\x03\x02\x02\x02GH\x070\x02" +
		"\x02H\x0E\x03\x02\x02\x02IJ\x07*\x02\x02J\x10\x03\x02\x02\x02KL\x07+\x02" +
		"\x02L\x12\x03\x02\x02\x02MN\x07A\x02\x02N\x14\x03\x02\x02\x02OP\x07]\x02" +
		"\x02PQ\x07_\x02\x02Q\x16\x03\x02\x02\x02RS\x07B\x02\x02S\x18\x03\x02\x02" +
		"\x02TU\x07.\x02\x02U\x1A\x03\x02\x02\x02VW\x07<\x02\x02W\x1C\x03\x02\x02" +
		"\x02XY\x07p\x02\x02YZ\x07w\x02\x02Z[\x07n\x02\x02[\\\x07n\x02\x02\\\x1E" +
		"\x03\x02\x02\x02]^\x07]\x02\x02^ \x03\x02\x02\x02_`\x07_\x02\x02`\"\x03" +
		"\x02\x02\x02ae\t\x02\x02\x02bd\t\x03\x02\x02cb\x03\x02\x02\x02dg\x03\x02" +
		"\x02\x02ec\x03\x02\x02\x02ef\x03\x02\x02\x02f$\x03\x02\x02\x02ge\x03\x02" +
		"\x02\x02hm\x07$\x02\x02il\x05\'\x14\x02jl\n\x04\x02\x02ki\x03\x02\x02" +
		"\x02kj\x03\x02\x02\x02lo\x03\x02\x02\x02mk\x03\x02\x02\x02mn\x03\x02\x02" +
		"\x02np\x03\x02\x02\x02om\x03\x02\x02\x02pq\x07$\x02\x02q&\x03\x02\x02" +
		"\x02ru\x07^\x02\x02sv\t\x05\x02\x02tv\x05)\x15\x02us\x03\x02\x02\x02u" +
		"t\x03\x02\x02\x02v(\x03\x02\x02\x02wx\x07w\x02\x02xy\x05+\x16\x02yz\x05" +
		"+\x16\x02z{\x05+\x16\x02{|\x05+\x16\x02|*\x03\x02\x02\x02}~\t\x06\x02" +
		"\x02~,\x03\x02\x02\x02\x7F\x81\t\x07\x02\x02\x80\x7F\x03\x02\x02\x02\x81" +
		"\x82\x03\x02\x02\x02\x82\x80\x03\x02\x02\x02\x82\x83\x03\x02\x02\x02\x83" +
		"\x8A\x03\x02\x02\x02\x84\x86\x070\x02\x02\x85\x87\t\x07\x02\x02\x86\x85" +
		"\x03\x02\x02\x02\x87\x88\x03\x02\x02\x02\x88\x86\x03\x02\x02\x02\x88\x89" +
		"\x03\x02\x02\x02\x89\x8B\x03\x02\x02\x02\x8A\x84\x03\x02\x02\x02\x8A\x8B" +
		"\x03\x02\x02\x02\x8B.\x03\x02\x02\x02\x8C\x8D\x07v\x02\x02\x8D\x8E\x07" +
		"t\x02\x02\x8E\x8F\x07w\x02\x02\x8F\x96\x07g\x02\x02\x90\x91\x07h\x02\x02" +
		"\x91\x92\x07c\x02\x02\x92\x93\x07n\x02\x02\x93\x94\x07u\x02\x02\x94\x96" +
		"\x07g\x02\x02\x95\x8C\x03\x02\x02\x02\x95\x90\x03\x02\x02\x02\x960\x03" +
		"\x02\x02\x02\x97\x99\t\b\x02\x02\x98\x97\x03\x02\x02\x02\x99\x9A\x03\x02" +
		"\x02\x02\x9A\x98\x03\x02\x02\x02\x9A\x9B\x03\x02\x02\x02\x9B\x9C\x03\x02" +
		"\x02\x02\x9C\x9D\b\x19\x02\x02\x9D2\x03\x02\x02\x02\f\x02ekmu\x82\x88" +
		"\x8A\x95\x9A\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!o7dLexer.__ATN) {
			o7dLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(o7dLexer._serializedATN));
		}

		return o7dLexer.__ATN;
	}

}

