// Generated from ./o7d.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class o7dLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly T__2 = 3;
	public static readonly T__3 = 4;
	public static readonly T__4 = 5;
	public static readonly T__5 = 6;
	public static readonly T__6 = 7;
	public static readonly T__7 = 8;
	public static readonly T__8 = 9;
	public static readonly T__9 = 10;
	public static readonly T__10 = 11;
	public static readonly T__11 = 12;
	public static readonly T__12 = 13;
	public static readonly T__13 = 14;
	public static readonly T__14 = 15;
	public static readonly T__15 = 16;
	public static readonly ID = 17;
	public static readonly STRING = 18;
	public static readonly ESC_SEQ = 19;
	public static readonly UNICODE_ESC = 20;
	public static readonly HEX = 21;
	public static readonly NUMBER = 22;
	public static readonly BOOLEAN = 23;
	public static readonly WS = 24;
	public static readonly SINGLE_LINE_COMMENT = 25;
	public static readonly MULTI_LINE_COMMENT = 26;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "ID", "STRING", 
		"ESC_SEQ", "UNICODE_ESC", "HEX", "NUMBER", "BOOLEAN", "WS", "SINGLE_LINE_COMMENT", 
		"MULTI_LINE_COMMENT",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'header'", "'{'", "'}'", "'model'", "'@@'", "'.'", "'('", 
		"')'", "'?'", "'[]'", "'@'", "','", "':'", "'null'", "'['", "']'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, "ID", "STRING", "ESC_SEQ", "UNICODE_ESC", 
		"HEX", "NUMBER", "BOOLEAN", "WS", "SINGLE_LINE_COMMENT", "MULTI_LINE_COMMENT",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(o7dLexer._LITERAL_NAMES, o7dLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return o7dLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(o7dLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "o7d.g4"; }

	// @Override
	public get ruleNames(): string[] { return o7dLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return o7dLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return o7dLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return o7dLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x1C\xBB\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x03\x02\x03" +
		"\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03\x04\x03" +
		"\x04\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x06\x03\x06\x03" +
		"\x06\x03\x07\x03\x07\x03\b\x03\b\x03\t\x03\t\x03\n\x03\n\x03\v\x03\v\x03" +
		"\v\x03\f\x03\f\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x0F\x03" +
		"\x0F\x03\x0F\x03\x10\x03\x10\x03\x11\x03\x11\x03\x12\x03\x12\x07\x12h" +
		"\n\x12\f\x12\x0E\x12k\v\x12\x03\x13\x03\x13\x03\x13\x07\x13p\n\x13\f\x13" +
		"\x0E\x13s\v\x13\x03\x13\x03\x13\x03\x14\x03\x14\x03\x14\x05\x14z\n\x14" +
		"\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03\x16\x03\x16\x03\x17" +
		"\x06\x17\x85\n\x17\r\x17\x0E\x17\x86\x03\x17\x03\x17\x06\x17\x8B\n\x17" +
		"\r\x17\x0E\x17\x8C\x05\x17\x8F\n\x17\x03\x18\x03\x18\x03\x18\x03\x18\x03" +
		"\x18\x03\x18\x03\x18\x03\x18\x03\x18\x05\x18\x9A\n\x18\x03\x19\x06\x19" +
		"\x9D\n\x19\r\x19\x0E\x19\x9E\x03\x19\x03\x19\x03\x1A\x03\x1A\x03\x1A\x03" +
		"\x1A\x07\x1A\xA7\n\x1A\f\x1A\x0E\x1A\xAA\v\x1A\x03\x1A\x03\x1A\x03\x1B" +
		"\x03\x1B\x03\x1B\x03\x1B\x07\x1B\xB2\n\x1B\f\x1B\x0E\x1B\xB5\v\x1B\x03" +
		"\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03\xB3\x02\x02\x1C\x03\x02\x03\x05" +
		"\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13" +
		"\x02\v\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02" +
		"\x11!\x02\x12#\x02\x13%\x02\x14\'\x02\x15)\x02\x16+\x02\x17-\x02\x18/" +
		"\x02\x191\x02\x1A3\x02\x1B5\x02\x1C\x03\x02\n\x05\x02C\\aac|\x06\x022" +
		";C\\aac|\x04\x02$$^^\n\x02$$11^^ddhhppttvv\x05\x022;CHch\x03\x022;\x05" +
		"\x02\v\f\x0F\x0F\"\"\x04\x02\f\f\x0F\x0F\x02\xC5\x02\x03\x03\x02\x02\x02" +
		"\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02" +
		"\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02" +
		"\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02" +
		"\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02" +
		"\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02" +
		"#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02\'\x03\x02\x02\x02\x02)\x03" +
		"\x02\x02\x02\x02+\x03\x02\x02\x02\x02-\x03\x02\x02\x02\x02/\x03\x02\x02" +
		"\x02\x021\x03\x02\x02\x02\x023\x03\x02\x02\x02\x025\x03\x02\x02\x02\x03" +
		"7\x03\x02\x02\x02\x05>\x03\x02\x02\x02\x07@\x03\x02\x02\x02\tB\x03\x02" +
		"\x02\x02\vH\x03\x02\x02\x02\rK\x03\x02\x02\x02\x0FM\x03\x02\x02\x02\x11" +
		"O\x03\x02\x02\x02\x13Q\x03\x02\x02\x02\x15S\x03\x02\x02\x02\x17V\x03\x02" +
		"\x02\x02\x19X\x03\x02\x02\x02\x1BZ\x03\x02\x02\x02\x1D\\\x03\x02\x02\x02" +
		"\x1Fa\x03\x02\x02\x02!c\x03\x02\x02\x02#e\x03\x02\x02\x02%l\x03\x02\x02" +
		"\x02\'v\x03\x02\x02\x02){\x03\x02\x02\x02+\x81\x03\x02\x02\x02-\x84\x03" +
		"\x02\x02\x02/\x99\x03\x02\x02\x021\x9C\x03\x02\x02\x023\xA2\x03\x02\x02" +
		"\x025\xAD\x03\x02\x02\x0278\x07j\x02\x0289\x07g\x02\x029:\x07c\x02\x02" +
		":;\x07f\x02\x02;<\x07g\x02\x02<=\x07t\x02\x02=\x04\x03\x02\x02\x02>?\x07" +
		"}\x02\x02?\x06\x03\x02\x02\x02@A\x07\x7F\x02\x02A\b\x03\x02\x02\x02BC" +
		"\x07o\x02\x02CD\x07q\x02\x02DE\x07f\x02\x02EF\x07g\x02\x02FG\x07n\x02" +
		"\x02G\n\x03\x02\x02\x02HI\x07B\x02\x02IJ\x07B\x02\x02J\f\x03\x02\x02\x02" +
		"KL\x070\x02\x02L\x0E\x03\x02\x02\x02MN\x07*\x02\x02N\x10\x03\x02\x02\x02" +
		"OP\x07+\x02\x02P\x12\x03\x02\x02\x02QR\x07A\x02\x02R\x14\x03\x02\x02\x02" +
		"ST\x07]\x02\x02TU\x07_\x02\x02U\x16\x03\x02\x02\x02VW\x07B\x02\x02W\x18" +
		"\x03\x02\x02\x02XY\x07.\x02\x02Y\x1A\x03\x02\x02\x02Z[\x07<\x02\x02[\x1C" +
		"\x03\x02\x02\x02\\]\x07p\x02\x02]^\x07w\x02\x02^_\x07n\x02\x02_`\x07n" +
		"\x02\x02`\x1E\x03\x02\x02\x02ab\x07]\x02\x02b \x03\x02\x02\x02cd\x07_" +
		"\x02\x02d\"\x03\x02\x02\x02ei\t\x02\x02\x02fh\t\x03\x02\x02gf\x03\x02" +
		"\x02\x02hk\x03\x02\x02\x02ig\x03\x02\x02\x02ij\x03\x02\x02\x02j$\x03\x02" +
		"\x02\x02ki\x03\x02\x02\x02lq\x07$\x02\x02mp\x05\'\x14\x02np\n\x04\x02" +
		"\x02om\x03\x02\x02\x02on\x03\x02\x02\x02ps\x03\x02\x02\x02qo\x03\x02\x02" +
		"\x02qr\x03\x02\x02\x02rt\x03\x02\x02\x02sq\x03\x02\x02\x02tu\x07$\x02" +
		"\x02u&\x03\x02\x02\x02vy\x07^\x02\x02wz\t\x05\x02\x02xz\x05)\x15\x02y" +
		"w\x03\x02\x02\x02yx\x03\x02\x02\x02z(\x03\x02\x02\x02{|\x07w\x02\x02|" +
		"}\x05+\x16\x02}~\x05+\x16\x02~\x7F\x05+\x16\x02\x7F\x80\x05+\x16\x02\x80" +
		"*\x03\x02\x02\x02\x81\x82\t\x06\x02\x02\x82,\x03\x02\x02\x02\x83\x85\t" +
		"\x07\x02\x02\x84\x83\x03\x02\x02\x02\x85\x86\x03\x02\x02\x02\x86\x84\x03" +
		"\x02\x02\x02\x86\x87\x03\x02\x02\x02\x87\x8E\x03\x02\x02\x02\x88\x8A\x07" +
		"0\x02\x02\x89\x8B\t\x07\x02\x02\x8A\x89\x03\x02\x02\x02\x8B\x8C\x03\x02" +
		"\x02\x02\x8C\x8A\x03\x02\x02\x02\x8C\x8D\x03\x02\x02\x02\x8D\x8F\x03\x02" +
		"\x02\x02\x8E\x88\x03\x02\x02\x02\x8E\x8F\x03\x02\x02\x02\x8F.\x03\x02" +
		"\x02\x02\x90\x91\x07v\x02\x02\x91\x92\x07t\x02\x02\x92\x93\x07w\x02\x02" +
		"\x93\x9A\x07g\x02\x02\x94\x95\x07h\x02\x02\x95\x96\x07c\x02\x02\x96\x97" +
		"\x07n\x02\x02\x97\x98\x07u\x02\x02\x98\x9A\x07g\x02\x02\x99\x90\x03\x02" +
		"\x02\x02\x99\x94\x03\x02\x02\x02\x9A0\x03\x02\x02\x02\x9B\x9D\t\b\x02" +
		"\x02\x9C\x9B\x03\x02\x02\x02\x9D\x9E\x03\x02\x02\x02\x9E\x9C\x03\x02\x02" +
		"\x02\x9E\x9F\x03\x02\x02\x02\x9F\xA0\x03\x02\x02\x02\xA0\xA1\b\x19\x02" +
		"\x02\xA12\x03\x02\x02\x02\xA2\xA3\x071\x02\x02\xA3\xA4\x071\x02\x02\xA4" +
		"\xA8\x03\x02\x02\x02\xA5\xA7\n\t\x02\x02\xA6\xA5\x03\x02\x02\x02\xA7\xAA" +
		"\x03\x02\x02\x02\xA8\xA6\x03\x02\x02\x02\xA8\xA9\x03\x02\x02\x02\xA9\xAB" +
		"\x03\x02\x02\x02\xAA\xA8\x03\x02\x02\x02\xAB\xAC\b\x1A\x02\x02\xAC4\x03" +
		"\x02\x02\x02\xAD\xAE\x071\x02\x02\xAE\xAF\x07,\x02\x02\xAF\xB3\x03\x02" +
		"\x02\x02\xB0\xB2\v\x02\x02\x02\xB1\xB0\x03\x02\x02\x02\xB2\xB5\x03\x02" +
		"\x02\x02\xB3\xB4\x03\x02\x02\x02\xB3\xB1\x03\x02\x02\x02\xB4\xB6\x03\x02" +
		"\x02\x02\xB5\xB3\x03\x02\x02\x02\xB6\xB7\x07,\x02\x02\xB7\xB8\x071\x02" +
		"\x02\xB8\xB9\x03\x02\x02\x02\xB9\xBA\b\x1B\x02\x02\xBA6\x03\x02\x02\x02" +
		"\x0E\x02ioqy\x86\x8C\x8E\x99\x9E\xA8\xB3\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!o7dLexer.__ATN) {
			o7dLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(o7dLexer._serializedATN));
		}

		return o7dLexer.__ATN;
	}

}

